/// Core TUI event types and key codes for handling user input and system events.
library;

/// Base class for all TUI events.
///
/// Events are generated by the TUI framework and passed to your application's
/// [TuiApp.onEvent] method. Common event types include:
/// - [TuiKeyEvent] for keyboard input
/// - [TuiResizeEvent] for terminal resize
/// - [TuiTickEvent] for timer-based updates
sealed class TuiEvent {
  const TuiEvent();
}

/// Event generated periodically based on [TuiApp.tickInterval].
///
/// Use this for animations, progress updates, or other time-based UI changes.
/// The event includes the timestamp when it was generated.
class TuiTickEvent extends TuiEvent {
  /// The timestamp when this tick event was generated.
  final DateTime at;

  const TuiTickEvent(this.at);
}

/// Event generated when the terminal is resized.
///
/// Your application should handle this event to adapt the UI layout
/// to the new terminal dimensions.
class TuiResizeEvent extends TuiEvent {
  /// New terminal width in characters.
  final int width;

  /// New terminal height in characters.
  final int height;

  const TuiResizeEvent(this.width, this.height);
}

/// Enumeration of supported key codes.
///
/// This includes printable characters (represented via [TuiKeyEvent.char])
/// and special keys like arrows, function keys, and control sequences.
enum TuiKeyCode {
  /// Printable character - see [TuiKeyEvent.char] for the actual character.
  printable,

  // Control/navigation keys
  enter,
  escape,
  backspace,
  delete,
  home,
  end,
  tab,
  arrowUp,
  arrowDown,
  arrowLeft,
  arrowRight,
  pageUp,
  pageDown,

  // Control key combinations
  ctrlA,
  ctrlB,
  ctrlC,
  ctrlD,
  ctrlE,
  ctrlF,
  ctrlG,
  ctrlH,
  ctrlJ,
  ctrlK,
  ctrlL,
  ctrlN,
  ctrlO,
  ctrlP,
  ctrlQ,
  ctrlR,
  ctrlS,
  ctrlT,
  ctrlU,
  ctrlV,
  ctrlW,
  ctrlX,
  ctrlY,
  ctrlZ,

  /// Unrecognized key code.
  unknown,
}

/// Event generated when a key is pressed.
///
/// For printable characters, [code] will be [TuiKeyCode.printable] and
/// [char] will contain the actual character. For special keys, [code]
/// identifies the key and [char] will be null.
///
/// ## Examples
///
/// ```dart
/// void onEvent(TuiEvent event, TuiContext context) {
///   if (event is TuiKeyEvent) {
///     if (event.isPrintable) {
///       print('User typed: ${event.char}');
///     } else if (event.code == TuiKeyCode.enter) {
///       print('User pressed Enter');
///     }
///   }
/// }
/// ```
class TuiKeyEvent extends TuiEvent {
  /// The key code that was pressed.
  final TuiKeyCode code;

  /// The character that was typed (only set for [TuiKeyCode.printable]).
  final String? char;

  const TuiKeyEvent({required this.code, this.char});

  /// Whether this event represents a printable character.
  ///
  /// Returns true if [code] is [TuiKeyCode.printable] and [char] is not null.
  bool get isPrintable => code == TuiKeyCode.printable && char != null;
}
